import java.awt.ItemSelectable;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Handler;

import javax.print.CancelablePrintJob;

import LG_Core.Algorithm;

public class AlgorithmCluster {
    /* this module can handle items :
     * itemless algorithms : start to finish
     * itemed algorithems : get the item only and the next module will be
     * triggered by the item and handle the rest of the algorithm
     *
     */
    private ArrayList<Algorithm> algorithms = new ArrayList<>();
    private int activeAlg = 0;

    public AlgorithmCluster(Algorithm activeAlg) {
        super();
        algorithms.add(activeAlg);
    }

    public AlgorithmCluster addAlg(Algorithm alg) {
        this.algorithms.add(alg);
        return this;
    }

    public void shuffleActiveAlg() {
        Random rand = new Random();
        this.activeAlg = rand.nextInt(this.algorithms.size());
    }

    public Algorithm getActiveAlg() {
        return algorithms.get(activeAlg);
    }

}