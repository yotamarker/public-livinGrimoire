package com.yotamarker.eyeresearch;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.drawable.BitmapDrawable;
import android.media.MediaPlayer;
import android.support.constraint.solver.widgets.Rectangle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Arrays;

public class AEye {
    public int outlinePixel = 30; // limit how dark an outline pixel is
    private double clusterPercent = 0.05;// fatness of outline of shapes (sand blast out)
    private int minObjectSize = 40; // how small an objext detected can be
    private AEyeClassifier eyeObj = new AEyeClassifier();
    //direction recognition global variables :
    private Boolean[][] imageA = new Boolean[13][13];
    private int changePrevMax =-1;
    private int changePrevMin =9001;
    private int changePrevMaxY =-1;
    private int changePrevMinY =9001;
    private String resulTemp ="";
    //movement after being static :
    private int ppm =0;
    private int ppmin = 0;
    private int ppmY =0;
    private int ppminY = 0;
    public ImageDepictor imageDepictor = new ImageDepictor();
    // end direction recognition global variables
    public AEye() {
        //c'tor
        for (int i = 0; i < imageA.length; i++){
            Arrays.fill(imageA[i], false);
        }
    }

    public void setMinObjectSize(int newVal) {
        // set minimum detectable item size
        if ((newVal >= 13)) {
            minObjectSize = newVal;
        }

    }

    public boolean overlappingRectangles(Rectangle R1, Rectangle R2) {
        // check if 2 rectangles overlap
        if (((R1.x > (R2.x + R2.width)) || ((R1.x + R1.width) < R2.x))) {
            return false;
        }

        if (((R1.y > (R2.y + R2.height)) || ((R1.y + R1.height) < R2.y))) {
            return false;
        }

        return true;
    }
    public Bitmap mark_dark_pixel(int x, int y, Bitmap bmp1, byte marker) {
        /* marker : size of marking around marked pixel (will show as colored square)
        x,y : pixels location
        * */
        for (int i = 0; (i <= marker); i++) {
            for (int j = 0; (j <= marker); j++) {
                try {
                    bmp1.setPixel((x + j), (y + i),Color.GREEN);
                }
                catch (Exception ex) {
                }

            }

        }
        return bmp1;
    }
    public Bitmap mark_dark_pixel(int x, int y, Bitmap bmp1, byte marker, int colorDotEnum) {
        /* marker : size of marking around marked pixel (will show as colored square)
        x,y : pixels location
        colorDotEnum : example : Color.Green
        * */
        for (int i = 0; (i <= marker); i++) {
            for (int j = 0; (j <= marker); j++) {
                try {
                    bmp1.setPixel((x + j), (y + i),colorDotEnum);
                }
                catch (Exception ex) {
                }

            }

        }
        return bmp1;
    }
    public Bitmap mark_dark_pixel_white(int x, int y, Bitmap bmp1, byte marker) {
        /* marker : size of marking around marked pixel (will show as colored square)
        x,y : pixels location
        * */
        return mark_dark_pixel(x,y,bmp1 ,(byte)marker,  Color.WHITE);
    }
    public Bitmap mark_dark_pixel_black(int x, int y, Bitmap bmp1, byte marker) {
        /* marker : size of marking around marked pixel (will show as colored square)
        x,y : pixels location
        * */
        return mark_dark_pixel(x,y,bmp1 ,(byte)marker,  Color.BLACK);
    }
    public Bitmap mark_dark_pixel_red(int x, int y, Bitmap bmp1, byte marker) {
        /* marker : size of marking around marked pixel (will show as colored square)
        x,y : pixels location
        * */
        return mark_dark_pixel(x,y,bmp1 ,(byte)marker,  Color.RED);
    }
    public Bitmap mark_dark_pixel_blue(int x, int y, Bitmap bmp1, byte marker) {
        /* marker : size of marking around marked pixel (will show as colored square)
        x,y : pixels location
        * */
        return mark_dark_pixel(x,y,bmp1 ,(byte)marker,  Color.BLUE);
    }
    public Bitmap graphicContour(Bitmap bmp , int xmin, int xmax , int ymin , int ymax,int colorOfMarking){
        /*
        marks a squar inside the bitmap 
        summon example graphicContour(bmp1,10,900,20,300,COLOR.BLUE)
        * */
        for (int i = xmin; i < xmax; i++) {
            bmp = mark_dark_pixel(i,ymin,bmp, (byte) 1,colorOfMarking);
            bmp = mark_dark_pixel(i,ymax,bmp, (byte) 1,colorOfMarking);
        }
        for (int i = ymin; i < ymax; i++) {
            //((xmin, i, bmp, 1)
            bmp = mark_dark_pixel(xmin,i,bmp, (byte) 1,colorOfMarking);
            bmp = mark_dark_pixel(xmax,i,bmp, (byte) 1,colorOfMarking);
        }
        return  bmp;
    }
    public char getPixelColor(int pixel) {
        //  r= red, g = green, b = blue
        int r = Color.red(pixel);
        int g = Color.green(pixel);
        int b = Color.blue(pixel);
        //black or white
        if(bigTosmall(r+6,g,r-6)&&bigTosmall(r+6,b,r-6)){if(miner(100,r,g,b)==100){return 'w';}else if(maxer(100,r,g,b)==100){return 'k';}}
        if(maxer(65,r,g,b)==65){return 'k';}
        if(bigTosmall(b+10,g,b-10)&&(bigTosmall(b+10,g,r))){return 'a';}//azure
        if(bigTosmall(g,r,b)||bigTosmall(g,b,r)){return 'g';}//green
        if(bigTosmall(b+10,g,b-10)&&(maxer(r,g,b)==r)){return 'r';}//red
        if(bigTosmall(g+10,r,g-10)&&bigTosmall(r+10,g,b)){return  'y';}//yellow
        if(bigTosmall(r,g,b)){if(g<128){return 'c';};return  'o';}//brown or orange
        if(bigTosmall(b,g,r)||bigTosmall(b,r,g)){return  'b';}//blue
        if(bigTosmall(b+6,r,b-6)&&bigTosmall(r+6,b,g+50)){return 'v';}//violet
        if(bigTosmall(r,b,g)){return 'p';}//pink
        return 'w';//white
    }
    public Boolean isBlackPixel(int pixel) {
        //rapid ver for checking if the pixel black
        //  r= red, g = green, b = blue
        int r = Color.red(pixel);
        int g = Color.green(pixel);
        int b = Color.blue(pixel);
        //black or white
        if(bigTosmall(r+6,g,r-6)&&bigTosmall(r+6,b,r-6)){if(maxer(100,r,g,b)==100){return true;}}
        if(maxer(65,r,g,b)==65){return true;}
        return false;//white
    }
    public Boolean bigTosmall(int ... a)
            // return true if input nums decend in value
    {
        for (int i = 0; i < a.length - 1; i++) {
            if (!(a[i] > a[i + 1])) {
                return false;
            }
        }
        return true;
    }
    public String colorChartoString(String ch){
        switch(ch) {
            case "r" :
                return "red";
            case "g" :
                return "green";
            case "b" :
                return "blue";
            case "k" :
                return "black";
            case "w" :
                return "white";
            case "o" :
                return "orange";
            case "p" :
                return "pink";
            case "a" :
                return "azure";
            case "v" :
                return "violet";
            case "y" :
                return "yellow";
            case "c" :
                return "brown";//chiiro
            default :
        }
        return  "";
    }
    public static int miner(int... a) {
        //returns array minimum
        int minimum = a[0];
        for (int i = 1; i < a.length; i++) {
            if (a[i] < minimum) {
                minimum = a[i];
            }
        }
        return minimum;
    }

    public static int maxer(int... a) {
        // returns array maximum
        int maximum = a[0];
        for (int i = 1; i < a.length; i++) {
            if (a[i] > maximum) {
                maximum = a[i];
            }
        }
        return maximum;
    }
    public ImageDepictor directionGetter(Bitmap bmp1)
            /* returns the direction of the latest physical movement
            * */
    {
        ImageDepictor imageDepictor = new ImageDepictor();
        Boolean refreshImageA = false;
        Boolean exploded = resulTemp.contains("explosion");
        Boolean imploded = resulTemp.contains("implosion");
        resulTemp="";
        Boolean[][] imageB = new Boolean[13][13];
        for (int i = 0; i < imageB.length; i++){
            Arrays.fill(imageB[i], false);
        }
        int changeCurMax = -1;
        int changeCurMin =9001;
        int changeCurMaxY = -1;
        int changeCurMinY =9001;
        //preloop vars :
        int jumpX = bmp1.getWidth()/14;
        int jumpY = bmp1.getHeight()/14;
        Boolean outlinePxl = false;
        for (int i = 1; i <= 13; ++i) {
            for (int j = 1; j <= 13; ++j) {
                //Boolean outlinePxl = isOutLine(j*jumpX,i*jumpY,bmp1,20);
                int pixel = bmp1.getPixel(j*jumpX,i*jumpY);
                outlinePxl = isBlackPixel(pixel);
                if(outlinePxl){bmp1=mark_dark_pixel_red(j*jumpX,i*jumpY,bmp1,(byte)30);imageB[j-1][i-1]=true;}
                if(imageB[j-1][i-1]^imageA[j-1][i-1]){
                    changeCurMin=miner(j,changeCurMin);changeCurMax=maxer(j,changeCurMax);
                    changeCurMinY=miner(i,changeCurMinY);changeCurMaxY=maxer(i,changeCurMaxY);
                }
//                if(!(outlinePxl)){bmp1=mark_dark_pixel_red(j*jumpX,i*jumpY,bmp1,(byte)10);imageB[j][i]=true;
//                if(!imageA[j][i]){changeCurMin=miner(j,changeCurMin);changeCurMax=maxer(j,changeCurMax);
//                    changeCurMinY=miner(j,changeCurMinY);changeCurMaxY=maxer(j,changeCurMaxY);
//                }
//                }
            }
        }
        Log.i("test", "shiiiiiiiiiiiiiiiit");
        //mark movement area :
        bmp1=mark_dark_pixel(changePrevMin*jumpX,6*jumpY,bmp1,(byte)50);
        bmp1=mark_dark_pixel(changePrevMax*jumpX,6*jumpY,bmp1,(byte)50);
        bmp1=mark_dark_pixel_blue(changeCurMax*jumpX,5*jumpY,bmp1,(byte)50);
        bmp1=mark_dark_pixel_blue(changeCurMin*jumpX,5*jumpY,bmp1,(byte)50);
        imageDepictor.setBmp(bmp1);
        //imageDepictor.setBmp(graphicContour(bmp1,(changeCurMin+1)*jumpX,(changeCurMax+1)*jumpX,(changeCurMinY+1)*jumpY,(changeCurMaxY+1)*jumpY,Color.BLUE));
        if(imploded){
            if(changeCurMax-changePrevMax>changePrevMax-changeCurMin){resulTemp ="right";}
            else{resulTemp="left";}
            bmp1=mark_dark_pixel_black(changePrevMin*jumpX,6*jumpY,bmp1,(byte)50);
            bmp1=mark_dark_pixel_black(changePrevMax*jumpX,6*jumpY,bmp1,(byte)50);
        }else{
        if(changeCurMax>changePrevMax){resulTemp+="right";}
        if(changeCurMin<changePrevMin){resulTemp+="left";}
        if(resulTemp.equals("rightleft")){resulTemp="explosion";}
        if(changeCurMax<changePrevMax&&changeCurMin>changePrevMin){resulTemp="implosion";}
        if(exploded&&changeCurMax<=changePrevMax&&changeCurMin>=changePrevMin){resulTemp="implosion";}

        if(!exploded&&changeCurMax==changePrevMax&&changeCurMin==changePrevMin){resulTemp="blink";}
        if(resulTemp.isEmpty()){resulTemp="static";}}

            for (int i = 1; i <= 13; ++i) {
                for (int j = 1; j <= 13; ++j) {
                    imageA[j-1][i-1]=imageB[j-1][i-1];
                }
        }
        changePrevMax = changeCurMax;
        changePrevMin=changeCurMin;
        changePrevMaxY = changeCurMax;
        changePrevMinY=changeCurMin;
        if(resulTemp.equals("implosion")){
            changePrevMax = changeCurMin + (changeCurMax-changeCurMin)/2;
            changePrevMin=changePrevMax;

        }
        imageDepictor.setDepiction(resulTemp);
        return imageDepictor;
    }
    public Bitmap markObjects(Bitmap bitmap, int color, ArrayList<Rectangle> rectangles) {
        // marks rectangle list on bitmap
        for (Rectangle rectangle : rectangles) {
            bitmap = graphicContour(bitmap,rectangle.x,rectangle.x + rectangle.width,rectangle.y,rectangle.y + rectangle.height,color);
        }
        return bitmap;
    }
    public Bitmap writeOnDrawable(Bitmap bmp, String text, int colorDotEnum,int textSize,Point point){
        /*
        adds caption to a bitmap image
        example of summon : writeOnDrawable(bmp,"hadouken",Color.Black,200,new Point (0,bmRotated.getHeight()/2));
        * */
        Paint paint = new Paint();
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(colorDotEnum);
        paint.setTextSize(textSize);
        Canvas canvas = new Canvas(bmp);
        canvas.drawText(text, point.x, point.y, paint);
        return bmp;
    }
    public ArrayList<Rectangle> detectObjects(Bitmap bmp){
        /* returns list of objects rectangled locations on the bitmap
        * */
        int upperLid = 0;
        int lowerLid =0;
        int peaLeft=0;
        int minY = bmp.getHeight()+1;int maxY = 0;int minX = 0;
        ArrayList<Rectangle> allObjects = new ArrayList<Rectangle>();//*global
        Boolean topLid = true;
        Boolean isWhiteLine = true;
        //bmp = graphicContour(bmp,0,bmp.getWidth(),0,bmp.getHeight(),Color.WHITE);
        for (int i = 2; i < bmp.getHeight()-2; i++) {
            isWhiteLine=true;
            for (int j = 0; j < bmp.getWidth()-2; j++) {
                Boolean blackPxl = isBlackPixel(bmp.getPixel(j,i));
                if(blackPxl){isWhiteLine=false;break;}
            }
            if(!isWhiteLine&&topLid){upperLid=i;topLid=!topLid;}
            else if(isWhiteLine&&!topLid){lowerLid=i;topLid=!topLid;
            Boolean leftLid = true;
            Boolean whitePillar = true;
                for (int iB = 10; iB < bmp.getWidth()-10; iB++) {
                    whitePillar=true;
                    for (int jB = upperLid; jB < lowerLid; jB++) {
                        Boolean isBlkPxl = isBlackPixel(bmp.getPixel(iB,jB));
                        if(isBlkPxl){whitePillar=false;break;}
                    }
                    if(!whitePillar&&leftLid){peaLeft = iB;leftLid=!leftLid;}
                    else if(whitePillar&&!leftLid){int h = lowerLid-upperLid;int w = iB-peaLeft;
                    if(h>20&&w>20){allObjects.add(new RectangleCtor(peaLeft,upperLid,iB,lowerLid));upperLid=0;lowerLid=0;peaLeft=0;}
                    }
                }
            }

        }
        return allObjects;
    }
    public Bitmap detectObjects2(Bitmap bmp){
        /* returns list of objects rectangled locations on the bitmap
         * */
        Bitmap result = bmp;
        int upperLid = 0;
        int lowerLid =0;
        int peaLeft=0;
        int minY = bmp.getHeight()+1;int maxY = 0;int minX = 0;
        ArrayList<Rectangle> allObjects = new ArrayList<Rectangle>();//*global
        Boolean topLid = true;
        Boolean isWhiteLine = true;
        //bmp = graphicContour(bmp,0,bmp.getWidth(),0,bmp.getHeight(),Color.WHITE);
        for (int i = 2; i < bmp.getHeight()-2; i++) {
            isWhiteLine = true;
            for (int j = 0; j < bmp.getWidth() - 2; j++) {
                Boolean blackPxl = isBlackPixel(bmp.getPixel(j, i));
                if (blackPxl) {
                    isWhiteLine = false;
                    break;
                }
            }
            if (!isWhiteLine && topLid) {
                upperLid = i;
                topLid = !topLid;
                for (int jm = 1; jm < bmp.getWidth() - 10; jm++) {
                    result.setPixel(jm, upperLid + 1, Color.GREEN);
                    result.setPixel(jm, upperLid + 2, Color.GREEN);
                    result.setPixel(jm, upperLid + 3, Color.GREEN);
                    result.setPixel(jm, upperLid + 4, Color.GREEN);
                }
            } else if (isWhiteLine && !topLid && i - upperLid > 200) {
                lowerLid = i;
                topLid = !topLid;
                for (int jm = 1; jm < bmp.getWidth() - 10; jm++) {
                    result.setPixel(jm, lowerLid + 1, Color.RED);
                    result.setPixel(jm, lowerLid + 2, Color.RED);
                    result.setPixel(jm, lowerLid + 3, Color.RED);
                    result.setPixel(jm, lowerLid + 4, Color.RED);
                }

            Boolean leftLid = true;
            Boolean whitePillar = true;

            for (int iB = 10; iB < bmp.getWidth() - 100; iB++) {
                int wtest = bmp.getWidth() - 99;
                if (iB == wtest) {
                    whitePillar = true;
                }
                whitePillar = true;
                int ul = upperLid;
                int ll = lowerLid;
                for (int jB = ul; jB < ll; jB++) {
                    Boolean isBlkPxl = isBlackPixel(bmp.getPixel(iB, jB));
                    if (isBlkPxl) {
                        whitePillar = false;
                        break;
                    }
                }
                if (!whitePillar && leftLid) {
                    peaLeft = iB;
                    leftLid = !leftLid;
                    result = graphicContour(result, peaLeft, peaLeft + 4, upperLid + 5, lowerLid - 5, Color.BLUE);
                } else if (whitePillar && !leftLid) {
                    int h = lowerLid - upperLid;
                    int w = iB - peaLeft;
                    if (w > 20) {
                        graphicContour(result, iB, iB + 4, upperLid + 5, lowerLid - 5, Color.YELLOW);
                        leftLid = !leftLid;
                        allObjects.add(new RectangleCtor(peaLeft, upperLid, iB, lowerLid));
                        //upperLid=0;lowerLid=0;
                        //peaLeft=0;
                    }
                }
            }
        }//test
            }
        return result;
    }
    public Bitmap detectObjectsV3(Bitmap bmp){
        /* returns list of objects rectangled locations on the bitmap
         * */
        Bitmap result = bmp;
        int upperLid = 0;
        int lowerLid =0;
        int peaLeft=0;
        ArrayList<Rectangle> allObjects = new ArrayList<Rectangle>();//*global
        Boolean topLid = true;
        Boolean isWhiteLine = true;
        //bmp = graphicContour(bmp,0,bmp.getWidth(),0,bmp.getHeight(),Color.WHITE);
        int i = 2;
        while(i < bmp.getHeight()-2){
            isWhiteLine = true;
            for (int j = 0; j < bmp.getWidth() - 2; j++) {
                Boolean blackPxl = isBlackPixel(bmp.getPixel(j, i));
                if (blackPxl) {
                    isWhiteLine = false;
                    break;
                }
            }
            if (!isWhiteLine && topLid) {
                upperLid = i;
                topLid = !topLid;
                i+=199;
                result = lineMarker(result,upperLid,4,Color.GREEN);
            } else if (isWhiteLine && !topLid ) {
                lowerLid = i;
                topLid = !topLid;
                result = lineMarker(result,lowerLid,4,Color.RED);
                Boolean leftLid = true;
                Boolean whitePillar = true;
                int iB = 10;
                while (iB < bmp.getWidth() - 100){
                    int wtest = bmp.getWidth() - 99;
                    if (iB == wtest) {
                        whitePillar = true;
                    }
                    whitePillar = true;
                    for (int jB = upperLid; jB < lowerLid; jB++) {
                        // loop b
                        Boolean isBlkPxl = isBlackPixel(bmp.getPixel(iB, jB));
                        if (isBlkPxl) {
                            whitePillar = false;
                            break;
                        }
                    }
                    if (!whitePillar && leftLid) {
                        peaLeft = iB;
                        leftLid = !leftLid;
                        iB+=20;
                        result = graphicContour(result, peaLeft, peaLeft + 4, upperLid + 5, lowerLid - 5, Color.BLUE);
                    } else if (whitePillar && !leftLid) {
                        int h = lowerLid - upperLid;
                        int w = iB - peaLeft;
                        graphicContour(result, iB, iB + 4, upperLid + 5, lowerLid - 5, Color.YELLOW);
                        leftLid = !leftLid;
                        allObjects.add(new RectangleCtor(peaLeft, upperLid, iB, lowerLid));
                    }
                    iB++;
                }
            }
            i++;
        }//end main loop
        return result;
    }
    private Bitmap lineMarker(Bitmap bmp, int y, int thicness,int color) {
        for (int jm = 1; jm < bmp.getWidth() - 10; jm++) {
            for (int i = 0; i <thicness ; i++) {
                bmp.setPixel(jm, y + i, color);
            }
        }
        return bmp;
    }
}
