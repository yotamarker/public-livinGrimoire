**the Living Grimoire** (or the livingrimoire) is an Artificial General Intelligence software design pattern,
created by **Moti Barski**.

***

it was published on the battle programmers forum at <ref>yotamarker.com</ref>.

with the github at
<ref>https://github.com/yotamarker/public-livinGrimoire</ref>

the project is available in several programming languages
including :

swift
java
kotlin
python
VB.net
C#

## principle of work :

skills or abilities can be added to an instance of a living grimoire (a chobit class)
using just one line of code

much like the learning scene in the movie matrix, in which Neo has skills
installed in his mind, such as kung fu

the skills logic is kept inside the skill itself

when conditions are met the skill is triggered and it will send out an algorithm,
which is a list of actions known as algorithm parts, to run.

the brain class was created to address the issue of cluttered main classes
it can be used to keep all the hardware logic code such as converting a string of
output text into audio, for example.

## the objectives of the living grimoire

1 make coding simple. the main objective the Living Grimoire accomplishes
is in reducing the task of coding to simply use 1 line of code to add a skill
or 1 line of code to choose a personality, which is a skill set

2 organization :
the abilities of the living grimoire are packet neatly in their respective skills

3 the Living Grimoire was developed for the purpose of developing waifubots,
robotic girlfriends. users may publish skills in the Living Grimoire forums or
post demos of skills for sale.

in this way users may choose skills or hardware beef ups they wish for their waifubot
and add this skills using 1 line of code.

4 ease of collaboration

to collaborate with anyone on a project, all that is needed to do is
add his skill to the living grimoire instance using 1 line of code

## key differences between the living grimoire and assistants such as Alexa, Bixby and Siri

1. can prioritize skills against one another, pause and resume skills according to their priority
2. can que algorithm while running other algorithms
3. can engage several skills at once, and engage the right skills.
4. inter skill communication: skills can communicate with each other, pass data, and effect each other
5. interface is not used, which means it is applicable for all OOP programming languages, meaning cross platform porting.
6. has lots of auxiliary classes specialized for learnability and trigger management as well as misc. classes for time savings on common coding actions.
7. can form multistep algorithms, as well as abort algorithms while they run.
8. no censorship
9. step by step walkthroughed documentation

## hello world example (python main):

https://github.com/yotamarker/public-livinGrimoire/blob/master/livingrimoire%20start%20here/LivinGrimoire%20python/python%20files/main.py

books about the LivinGrimoire :

1 the living grimoire by Moti Barski : a detailed explanation with examples
about the living grimoire project

https://github.com/yotamarker/public-livinGrimoire/blob/master/livingrimoire%20start%20here/the%20living%20grimoire.pdf

![](https://i.ibb.co/61fWWnv/3d-Mockup.png)

2 Auxiliary Modules for the livingrimoire by Moti Barski:
modules that ease writing skills and make the waifubot more human

![](https://i.ibb.co/b7cKTtL/Moti-3-D-Mockup.jpg)

https://github.com/yotamarker/public-livinGrimoire/blob/master/livingrimoire%20start%20here/Auxiliary%20Modules%20for%20the%20livingrimoire.pdf