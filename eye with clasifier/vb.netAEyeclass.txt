Â© moti barski

Imports System.Math
Namespace rinegan
    Public Class Aeye
        Public outlinePixel As Integer = 30 ' limit how dark an outline pixel is
        Private clusterPercent As Double = 0.05 ' fatness of outline of shapes
        Private minObjectSize As Integer = 40 ' how small an objext detected can be
        Private x As Integer ' coordinates of grid area to work on
        Private y As Integer
        Private eyeObj As EyeClasifire = New EyeClasifire()

        ' eye grid
        Private shiberArray() As Boolean = New Boolean() {False, False, False, False, False, False, False, False, False}
        ' part in eye grid to process
        Private shiberCounter As Integer = 0
        Public Sub setXY(ByVal x1 As Integer, ByVal y1 As Integer) 'change
            x = x1
            y = y1
        End Sub
        Private Sub setXY(ByVal n As Integer)
            y = (n + 3) \ 3
            x = (n Mod 3) + 1
        End Sub
        Public Sub shiberVision(ByVal bmp As Bitmap, ByRef ImageList As List(Of Rectangle), ByRef ec1 As EyeClasifire)
            ' detect image objects in active eye grid area
            Dim processed As Boolean = False



            While Not processed
                If Not (shiberCounter > 2 And shiberCounter < 6) Then
                    If shiberArray(shiberCounter) Then
                        setXY(shiberCounter)
                        shiber(bmp, ImageList, ec1)
                        processed = True
                        shiberArray(shiberCounter) = False
                    End If
                Else
                    setXY(shiberCounter)
                    shiber(bmp, ImageList, ec1)

                    processed = True
                End If
                shiberCounter += 1
                If shiberCounter > 8 Then
                    shiberCounter = 0
                End If

            End While
        End Sub
        Public Sub setMinObjectSize(ByVal newVal As Integer)
            If newVal >= 13 Then
                minObjectSize = newVal
            End If
        End Sub
        Public Shared Function overlappingRectangles(ByVal R1 As Rectangle, ByVal R2 As Rectangle) As Boolean
            If R1.X > (R2.X + R2.Width) Or (R1.X + R1.Width) < R2.X Then
                Return False
            End If
            If R1.Y > (R2.Y + R2.Height) Or (R1.Y + R1.Height) < R2.Y Then
                Return False
            End If
            Return True
        End Function
        Public Sub setClusterPercent(ByVal newVal As Double)
            If newVal <= 1 And newVal >= 0 Then
                clusterPercent = newVal
            End If
        End Sub

        Public Shared Function is_pixel_dark_at(ByVal xPos As Integer, ByVal Ypos As Integer, ByVal image As Bitmap, ByVal DarkPixel As Integer) As Boolean
            Dim color As Color
            Dim r, g, b As Integer
            color = image.GetPixel(xPos, Ypos)
            r = color.R
            g = color.G
            b = color.B
            If (r < DarkPixel) And (g < DarkPixel) And (b < DarkPixel) Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Shared Function isOutLine(ByVal xPos As Integer, ByVal Ypos As Integer, ByVal image As Bitmap, ByVal bias As Integer) As Boolean

            Dim result As Boolean = False
            Dim change As Byte = 0
            If xPos > 0 And xPos < image.Width - 1 And Ypos > 0 And Ypos < image.Height - 1 Then
                Dim color4, color5, color8 As Color
                color8 = image.GetPixel(xPos, Ypos + 1)
                color4 = image.GetPixel(xPos - 1, Ypos)
                color5 = image.GetPixel(xPos, Ypos)

                If (CType(color5.R, Integer) > CType(color4.R, Integer) - bias) And (CType(color5.R, Integer) < CType(color4.R, Integer) + bias) Then
                    change += 1

                End If
                If (CType(color5.G, Integer) > CType(color4.G, Integer) - bias) And (CType(color5.G, Integer) < CType(color4.G, Integer) + bias) Then
                    change += 1

                End If
                If (CType(color5.B, Integer) > CType(color4.B, Integer) - bias) And (CType(color5.B, Integer) < CType(color4.B, Integer) + bias) Then
                    change += 1

                End If
                If (CType(color5.R, Integer) > CType(color8.R, Integer) - bias) And (CType(color5.R, Integer) < CType(color8.R, Integer) + bias) Then
                    change += 1

                End If
                If (CType(color5.G, Integer) > CType(color8.G, Integer) - bias) And (CType(color5.G, Integer) < CType(color8.G, Integer) + bias) Then
                    change += 1

                End If
                If (CType(color5.B, Integer) > CType(color8.B, Integer) - bias) And (CType(color5.B, Integer) < CType(color8.B, Integer) + bias) Then
                    change += 1

                End If
            End If


            If change = 6 Then
                result = True
            End If
            Return result
        End Function
        Public Shared Function mark_dark_pixel(ByVal x As Integer, ByVal y As Integer, ByVal bmp1 As Bitmap, ByVal marker As Byte)
            For i As Integer = 0 To marker
                For j As Integer = 0 To marker
                    Try
                        bmp1.SetPixel(x + j, y + i, Color.Green)
                    Catch ex As Exception

                    End Try
                Next
            Next
            Return bmp1

        End Function
        Public Shared Function mark_dark_pixel_white(ByVal x As Integer, ByVal y As Integer, ByVal bmp1 As Bitmap, ByVal marker As Byte)
            For i As Integer = 0 To marker
                For j As Integer = 0 To marker
                    Try
                        bmp1.SetPixel(x + j, y + i, Color.White)
                    Catch ex As Exception

                    End Try
                Next
            Next
            Return bmp1

        End Function
        Public Shared Function mark_dark_pixel_black(ByVal x As Integer, ByVal y As Integer, ByVal bmp1 As Bitmap, ByVal marker As Byte)
            For i As Integer = 0 To marker
                For j As Integer = 0 To marker
                    Try
                        bmp1.SetPixel(x + j, y + i, Color.Black)
                    Catch ex As Exception

                    End Try
                Next
            Next
            Return bmp1

        End Function
        Public Shared Function getPixelColor(ByVal r As Integer, ByVal g As Integer, ByVal b As Integer) As Char
            ' r= red, g = green, b = blue
            Dim colorchar As Char
            If r > 245 And g > 245 And b > 245 Then
                colorchar = "w" ' white
            ElseIf r < 60 And g < 60 And b < 60 Then
                colorchar = "k" ' black (kuro in japanese)
            ElseIf r > g And g > b And g < 100 Then
                colorchar = "r" ' red
            ElseIf r > g And g > b And g > 200 Then
                colorchar = "y" ' yellow
            ElseIf r > g And g > b And 100 < g < 200 Then
                colorchar = "o" 'orange
            ElseIf (g > r And r > b) Or (g > b And b > r) Then
                colorchar = "g" 'green
            ElseIf b > g And g > r Then
                colorchar = "b" 'blue
            ElseIf (b > r And r > g) Or (r > b And g < 20) Then
                colorchar = "v" ' violet
            Else
                colorchar = "u" ' yet undefined
            End If
            Return colorchar
        End Function
        Public Shared Function mark_dark_pixelRED(ByVal x As Integer, ByVal y As Integer, ByVal bmp1 As Bitmap, ByVal marker As Byte)
            For i As Integer = 0 To marker
                For j As Integer = 0 To marker
                    Try
                        bmp1.SetPixel(x + j, y + i, Color.Red)
                    Catch ex As Exception

                    End Try
                Next
            Next
            Return bmp1

        End Function
        Public Shared Function mark_dark_pixelBlue(ByVal x As Integer, ByVal y As Integer, ByVal bmp1 As Bitmap, ByVal marker As Byte)
            For i As Integer = 0 To marker
                For j As Integer = 0 To marker
                    Try
                        bmp1.SetPixel(x + j, y + i, Color.Blue)
                    Catch ex As Exception

                    End Try
                Next
            Next
            Return bmp1

        End Function
        Public Function shiberActivator(ByRef bmp1 As Bitmap) As String
            ' activate grid areas where motion was detected and detect motion
            Static Dim imageA(13, 13) As Boolean
            Static Dim changePrevMax As Integer = -1
            Static Dim changePrevMin As Integer = 9001
            Static Dim changePrevMaxY As Integer = -1
            Static Dim changePrevMinY As Integer = 9001
            Static Dim resulTemp As String = ""
            Static Dim edge1 As String = ""
            Static Dim edge2 As String = ""
            Static Dim edge3 As String = ""
            Static Dim edge4 As String = ""
            Dim b1 As Boolean = False
            resulTemp = ""
            Dim imageB(13, 13) As Boolean
            Dim changeCurMax As Integer = -1
            Dim changeCurMin As Integer = 9001
            Dim changeCurMaxY As Integer = -1
            Dim changeCurMinY As Integer = 9001
            For i = 1 To 13
                For j = 1 To 13
                    If Not Aeye.isOutLine(j * bmp1.Width \ 14, i * bmp1.Height \ 14, bmp1, 20) Then
                        bmp1 = Aeye.mark_dark_pixelRED(j * bmp1.Width \ 14, i * bmp1.Height \ 14, bmp1, 6)
                        imageB(j, i) = True

                    End If
                    If (imageB(j, i) And Not imageA(j, i)) Then
                        Aeye.miner(j, changeCurMin)
                        Aeye.maxer(j, changeCurMax)
                        Aeye.miner(i, changeCurMinY)
                        Aeye.maxer(i, changeCurMaxY)
                    End If
                Next

            Next
            ' move area
            graphicContourBlue(bmp1, changeCurMin * bmp1.Width \ 14, changeCurMax * bmp1.Width \ 14, changeCurMinY * bmp1.Height \ 14, changeCurMaxY * bmp1.Height \ 14)
            Dim R1 As New Rectangle(changeCurMin * bmp1.Width \ 14, changeCurMinY * bmp1.Height \ 14, changeCurMax * bmp1.Width \ 14 - changeCurMin * bmp1.Width \ 14, changeCurMaxY * bmp1.Height \ 14 - changeCurMinY * bmp1.Height \ 14)
            Dim R2 As New Rectangle(0, 0, bmp1.Width \ 3, bmp1.Height \ 3)
            If overlappingRectangles(R1, R2) Then
                shiberArray(0) = True
            End If
            'If overlappingRectangles(R1, New Rectangle((x - 1) * bmp1.Width \ 3, (y - 1) * bmp1.Height \ 3, bmp1.Width \ 3, bmp1.Height \ 3)) Then
            '    shiberArray(1) = True
            'End If
            If overlappingRectangles(R1, New Rectangle(bmp1.Width \ 3, 0, bmp1.Width \ 3, bmp1.Height \ 3)) Then
                shiberArray(1) = True
            End If
            If overlappingRectangles(R1, New Rectangle(2 * bmp1.Width \ 3, 0, bmp1.Width \ 3, bmp1.Height \ 3)) Then
                shiberArray(2) = True
            End If
            If overlappingRectangles(R1, New Rectangle(0, 2 * bmp1.Height \ 3, bmp1.Width \ 3, bmp1.Height \ 3)) Then
                shiberArray(6) = True
            End If
            If overlappingRectangles(R1, New Rectangle(bmp1.Width \ 3, 2 * bmp1.Height \ 3, bmp1.Width \ 3, bmp1.Height \ 3)) Then
                shiberArray(7) = True
            End If
            If overlappingRectangles(R1, New Rectangle(2 * bmp1.Width \ 3, 2 * bmp1.Height \ 3, bmp1.Width \ 3, bmp1.Height \ 3)) Then
                shiberArray(8) = True
            End If
            If changeCurMax > changePrevMax Then
                resulTemp &= "right"
            End If
            If changeCurMin < changePrevMin Then
                resulTemp &= "left"
            End If
            If resulTemp = "rightleft" Then
                resulTemp = "explosion"
            End If
            If changeCurMax < changePrevMax And changeCurMin > changePrevMin Then
                resulTemp = "implosion"
            End If
            If Not (changeCurMax = -1 And changePrevMax = -1) Then
                If changeCurMax = -1 Or changePrevMax = -1 Then
                    resulTemp = "blink"
                End If
                edge2 = changeCurMax.ToString & "  " & changeCurMin.ToString
                edge1 = changePrevMax.ToString & "  " & changePrevMin.ToString
                Static Dim ppm As Integer
                Static Dim ppmin As Integer

                If resulTemp.Contains("blink") And Not changeCurMax = -1 Then
                    If changeCurMax > ppm Then
                        resulTemp = "right"
                    End If
                    If changeCurMin < ppmin Then
                        resulTemp = "left"
                    End If
                End If
                ppm = changePrevMax
                ppmin = changePrevMin
                b1 = True



                changePrevMax = changeCurMax
                changePrevMin = changeCurMin
            Else
                resulTemp = "static"
            End If

            'y axis
            Dim temp1 As String = resulTemp
            resulTemp = ""
            If changeCurMaxY > changePrevMaxY Then
                resulTemp &= "Down"
            End If
            If changeCurMinY < changePrevMinY Then
                resulTemp &= "Up"
            End If
            If resulTemp = "DownUp" Then
                resulTemp = "explosionY"
            End If
            If changeCurMaxY < changePrevMaxY And changeCurMinY > changePrevMinY Then
                resulTemp = "implosionY"
            End If
            If Not (changeCurMaxY = -1 And changePrevMaxY = -1) Then
                If changeCurMaxY = -1 Or changePrevMaxY = -1 Then
                    resulTemp = "blink"
                End If
                edge4 = changeCurMaxY.ToString & "  " & changeCurMinY.ToString
                edge3 = changePrevMaxY.ToString & "  " & changePrevMinY.ToString
                Static Dim ppmY As Integer
                Static Dim ppminY As Integer

                If resulTemp.Contains("blink") And Not changeCurMaxY = -1 Then
                    If changeCurMaxY > ppmY Then
                        resulTemp = "Down"
                    End If
                    If changeCurMinY < ppminY Then
                        resulTemp = "Up"
                    End If
                End If
                ppmY = changePrevMaxY
                ppminY = changePrevMinY
                b1 = True



                changePrevMaxY = changeCurMaxY
                changePrevMinY = changeCurMinY
            Else
                resulTemp &= "staticY"
            End If
            If b1 Then
                For i = 1 To 13
                    For j = 1 To 13

                        imageA(j, i) = imageB(j, i)


                    Next
                Next
            End If


            Return temp1 & " " & resulTemp

        End Function
        Public Shared Function DirectionGetterX(ByRef bmp1 As Bitmap) As String
            Static Dim imageA(13, 13) As Boolean
            Static Dim changePrevMax As Integer = -1
            Static Dim changePrevMin As Integer = 9001
            Static Dim resulTemp As String = ""
            Static Dim edge1 As String = ""
            Static Dim edge2 As String = ""
            resulTemp = ""
            Dim imageB(13, 13) As Boolean
            Dim changeCurMax As Integer = -1
            Dim changeCurMin As Integer = 9001
            For i = 1 To 13
                For j = 1 To 13
                    If Not Aeye.isOutLine(j * bmp1.Width \ 14, i * bmp1.Height \ 14, bmp1, 20) Then
                        bmp1 = Aeye.mark_dark_pixelRED(j * bmp1.Width \ 14, i * bmp1.Height \ 14, bmp1, 6)
                        imageB(j, i) = True

                    End If
                    If (imageB(j, i) And Not imageA(j, i)) Then
                        Aeye.miner(j, changeCurMin)
                        Aeye.maxer(j, changeCurMax)
                    End If
                Next

            Next

            If changeCurMax > changePrevMax Then
                resulTemp &= "right"
            End If
            If changeCurMin < changePrevMin Then
                resulTemp &= "left"
            End If
            If Not (changeCurMax = -1 And changePrevMax = -1) Then
                If changeCurMax = -1 Or changePrevMax = -1 Then
                    resulTemp = "blink"
                End If
                edge2 = changeCurMax.ToString & "  " & changeCurMin.ToString
                edge1 = changePrevMax.ToString & "  " & changePrevMin.ToString
                Static Dim ppm As Integer
                Static Dim ppmin As Integer

                If resulTemp.Contains("blink") And Not changeCurMax = -1 Then
                    If changeCurMax > ppm Then
                        resulTemp = "right"
                    End If
                    If changeCurMin < ppmin Then
                        resulTemp = "left"
                    End If
                End If
                ppm = changePrevMax
                ppmin = changePrevMin
                For i = 1 To 13
                    For j = 1 To 13

                        imageA(j, i) = imageB(j, i)


                    Next
                Next


                changePrevMax = changeCurMax
                changePrevMin = changeCurMin
            Else
                resulTemp = "static"
            End If
            Return resulTemp
        End Function
        Public Shared Function DirectionGetterY(ByRef bmp1 As Bitmap) As String
            Static Dim imageA(13, 13) As Boolean
            Static Dim changePrevMax As Integer = -1
            Static Dim changePrevMin As Integer = 9001
            Static Dim resulTemp As String = ""
            Static Dim edge1 As String = ""
            Static Dim edge2 As String = ""
            resulTemp = ""
            Dim imageB(13, 13) As Boolean
            Dim changeCurMax As Integer = -1
            Dim changeCurMin As Integer = 9001
            For i = 1 To 13
                For j = 1 To 13
                    If Not Aeye.isOutLine(j * bmp1.Width \ 14, i * bmp1.Height \ 14, bmp1, 20) Then
                        bmp1 = Aeye.mark_dark_pixelRED(j * bmp1.Width \ 14, i * bmp1.Height \ 14, bmp1, 6)
                        imageB(j, i) = True

                    End If
                    If (imageB(j, i) And Not imageA(j, i)) Then
                        Aeye.miner(i, changeCurMin)
                        Aeye.maxer(i, changeCurMax)
                    End If
                Next

            Next

            If changeCurMax > changePrevMax Then
                resulTemp &= "Down"
            End If
            If changeCurMin < changePrevMin Then
                resulTemp &= "Up"
            End If
            If Not (changeCurMax = -1 And changePrevMax = -1) Then
                If changeCurMax = -1 Or changePrevMax = -1 Then
                    resulTemp = "blink"
                End If
                edge2 = changeCurMax.ToString & "  " & changeCurMin.ToString
                edge1 = changePrevMax.ToString & "  " & changePrevMin.ToString
                Static Dim ppm As Integer
                Static Dim ppmin As Integer

                If resulTemp.Contains("blink") And Not changeCurMax = -1 Then
                    If changeCurMax > ppm Then
                        resulTemp = "Down"
                    End If
                    If changeCurMin < ppmin Then
                        resulTemp = "Up"
                    End If
                End If
                ppm = changePrevMax
                ppmin = changePrevMin
                For i = 1 To 13
                    For j = 1 To 13

                        imageA(j, i) = imageB(j, i)


                    Next
                Next


                changePrevMax = changeCurMax
                changePrevMin = changeCurMin
            Else
                resulTemp = "static"
            End If
            Return resulTemp
        End Function
        Public Shared Function graphicContour(ByVal bmp As Bitmap, ByVal xmin As Integer, ByVal xmax As Integer, ByVal ymin As Integer, ByVal ymax As Integer) As Bitmap
            For i = xmin To xmax
                bmp = mark_dark_pixel(i, ymin, bmp, 1)
                bmp = mark_dark_pixel(i, ymax, bmp, 1)
            Next
            For i = ymin To ymax
                bmp = mark_dark_pixel(xmin, i, bmp, 1)
                bmp = mark_dark_pixel(xmax, i, bmp, 1)
            Next
            Return bmp
        End Function
        Public Shared Function graphicContourWhite(ByVal bmp As Bitmap, ByVal xmin As Integer, ByVal xmax As Integer, ByVal ymin As Integer, ByVal ymax As Integer) As Bitmap
            For i = xmin To xmax
                bmp = mark_dark_pixel_white(i, ymin, bmp, 1)
                bmp = mark_dark_pixel_white(i, ymax, bmp, 1)
            Next
            For i = ymin To ymax
                bmp = mark_dark_pixel_white(xmin, i, bmp, 1)
                bmp = mark_dark_pixel_white(xmax, i, bmp, 1)
            Next
            Return bmp
        End Function
        Public Shared Function graphicContourBlack(ByVal bmp As Bitmap, ByVal xmin As Integer, ByVal xmax As Integer, ByVal ymin As Integer, ByVal ymax As Integer) As Bitmap
            For i = xmin To xmax
                bmp = mark_dark_pixel_black(i, ymin, bmp, 1)
                bmp = mark_dark_pixel_black(i, ymax, bmp, 1)
            Next
            For i = ymin To ymax
                bmp = mark_dark_pixel_black(xmin, i, bmp, 1)
                bmp = mark_dark_pixel_black(xmax, i, bmp, 1)
            Next
            Return bmp
        End Function

        Public Shared Function graphicContourBlue(ByVal bmp As Bitmap, ByVal xmin As Integer, ByVal xmax As Integer, ByVal ymin As Integer, ByVal ymax As Integer) As Bitmap
            For i = xmin To xmax
                bmp = mark_dark_pixelBlue(i, ymin, bmp, 1)
                bmp = mark_dark_pixelBlue(i, ymax, bmp, 1)
            Next
            For i = ymin To ymax
                bmp = mark_dark_pixelBlue(xmin, i, bmp, 1)
                bmp = mark_dark_pixelBlue(xmax, i, bmp, 1)
            Next
            Return bmp
        End Function
        Public Shared Function graphicContourRed(ByVal bmp As Bitmap, ByVal xmin As Integer, ByVal xmax As Integer, ByVal ymin As Integer, ByVal ymax As Integer) As Bitmap
            For i = xmin To xmax
                bmp = mark_dark_pixelRED(i, ymin, bmp, 1)
                bmp = mark_dark_pixelRED(i, ymax, bmp, 1)
            Next
            For i = ymin To ymax
                bmp = mark_dark_pixelRED(xmin, i, bmp, 1)
                bmp = mark_dark_pixelRED(xmax, i, bmp, 1)
            Next
            Return bmp
        End Function
        'Private Sub tracer(ByVal bmp1 As Bitmap, ByVal w1 As Integer, ByVal h1 As Integer, ByVal x As Integer, ByVal y As Integer)
        '    If (x > 0 And x < w1) And (y > 0 And y < h1) Then
        '        If Not checkedMatrix(x, y) Then
        '            checkedMatrix(x, y) = True
        '            If imageMatrix(x, y) Then 'not black pixel
        '                maxer(x, maxX)
        '                maxer(y, maxY)
        '                miner(x, minX)
        '                miner(y, minY)
        '                tracer(bmp1, w1, h1, x - 1, y - 1)
        '                tracer(bmp1, w1, h1, x, y - 1)
        '                tracer(bmp1, w1, h1, x + 1, y - 1)
        '                tracer(bmp1, w1, h1, x - 1, y)
        '                tracer(bmp1, w1, h1, x + 1, y)
        '                tracer(bmp1, w1, h1, x - 1, y + 1)
        '                tracer(bmp1, w1, h1, x, y + 1)
        '                'tracer(bmp1, w1, h1, x + 1, y + 1)
        '            End If
        '        End If
        '    End If
        'End Sub
        Public Shared Sub maxer(ByVal a As Integer, ByRef b As Integer)
            If a > b Then
                b = a
            End If
        End Sub
        Public Shared Sub miner(ByVal a As Integer, ByRef b As Integer)
            If a < b Then
                b = a
            End If
        End Sub
        Public Sub PopulateEyeData(ByVal bmp As Bitmap, ByRef ImageList As List(Of Rectangle))
            'bmp = Aeye.graphicContourWhite(bmp, 10, bmp.Width - 10, 10, bmp.Height - 10)
            Dim Aizugi As Integer
            Dim Azugi As Integer
            Dim minY, maxY, minX As Integer
            minY = 9001
            maxY = 0
            'Dim ImageList As New List(Of Rectangle)
            Dim imageMatrix(bmp.Width, bmp.Height) As Boolean
            Dim ImageListBlue As New List(Of Rectangle)

            Dim izugi As Boolean = True
            Dim isWhiteLine As Boolean = True
            Dim st1 As Integer ' step to make alg run faster
            st1 = 1
            For i = 10 To bmp.Height - 10 Step st1
                isWhiteLine = True
                For j = 10 To bmp.Width - 10
                    'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                    imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                    If imageMatrix(j, i) Then
                        isWhiteLine = False
                    End If

                Next
                If Not isWhiteLine And izugi Then
                    'ListA.Add(i)
                    Aizugi = i

                    izugi = Not izugi
                ElseIf isWhiteLine And Not izugi Then
                    'ListA.Add(i)
                    Azugi = i

                    izugi = Not izugi
                    Dim izugiB As Boolean = True
                    Dim isWhiteLineB As Boolean = True
                    For iB = 10 To bmp.Width - 10 Step 1
                        isWhiteLineB = True
                        For jB = Aizugi To Azugi Step st1
                            If imageMatrix(iB, jB) Then
                                isWhiteLineB = False
                                Aeye.miner(jB, minY)
                                Aeye.maxer(jB, maxY)
                            End If
                        Next
                        If Not isWhiteLineB And izugiB Then
                            'ListA.Add(i)
                            minX = iB
                            izugiB = Not izugiB
                        ElseIf isWhiteLineB And Not izugiB Then
                            If minObjectSize < iB - minX And minObjectSize < maxY - minY Then
                                ImageList.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))
                            End If

                            izugiB = Not izugiB
                            minY = 9001
                            maxY = 0
                        End If

                    Next
                End If
            Next
            'lv1 recs
            For Each item As Rectangle In ImageList
                bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
                'TextBox3.Text &= "size " & (item.Height * item.Width) & " "
            Next
#Region "Cluster"
            For Each item As Rectangle In ImageList
                Dim outLineMatrix(bmp.Width, bmp.Height) As Boolean
                Dim cluster As Integer = 0
                Dim clusterlim As Integer = Convert.ToInt32(item.Width * clusterPercent)
                Dim n1 As Integer
                n1 = item.X + item.Width - 1
                For i = item.Y To item.Y + item.Height - 1
                    For j = item.X To item.X + item.Width - 1
                        n1 = item.X + item.Width - 1
                        If imageMatrix(j, i) Then
                            n1 = j
                            Exit For
                        End If
                    Next

                    For j2 = n1 To item.X + item.Width - 1
                        If imageMatrix(j2, i) And cluster < clusterlim Then
                            cluster = 0
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'lv3
                            outLineMatrix(j2, i) = True

                        ElseIf cluster >= clusterlim Then
                            Exit For
                        Else
                            cluster += 1
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'outLineMatrix(j2, i) = True
                        End If
                    Next
                    cluster = 0

                Next
                n1 = item.Y
                For i = item.Y To item.Y + item.Height - 1
                    For j = item.X + item.Width - 1 To item.X Step -1
                        n1 = item.X
                        If imageMatrix(j, i) Then
                            n1 = j
                            Exit For
                        End If
                    Next

                    For j2 = n1 To item.X Step -1
                        If imageMatrix(j2, i) And cluster < clusterlim Then
                            cluster = 0
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            outLineMatrix(j2, i) = True
                        ElseIf cluster >= clusterlim Then
                            Exit For
                        Else
                            cluster += 1
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'outLineMatrix(j2, i) = True
                        End If
                    Next
                    cluster = 0

                Next
                For i = 0 To bmp.Height - 1
                    For j = 0 To bmp.Width - 1
                        If outLineMatrix(j, i) Then
                            bmp = Aeye.mark_dark_pixelRED(j, i, bmp, 1)
                        End If
                    Next
                Next
            Next
            'lv3


#End Region
            For Each item As Rectangle In ImageList
                izugi = True

                For i = item.Y To item.Height + item.Y
                    isWhiteLine = True
                    For j = item.X To item.Width + item.X
                        'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                        'imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                        If imageMatrix(j, i) Then
                            isWhiteLine = False
                        End If

                    Next
                    If Not isWhiteLine And izugi Then
                        'ListA.Add(i)
                        Aizugi = i

                        izugi = Not izugi
                    ElseIf isWhiteLine And Not izugi Then
                        'ListA.Add(i)
                        Azugi = i

                        izugi = Not izugi
                        Dim izugiB As Boolean = True
                        Dim isWhiteLineB As Boolean = True
                        For iB = item.X To item.Width + item.X
                            isWhiteLineB = True
                            For jB = Aizugi To Azugi
                                If imageMatrix(iB, jB) Then
                                    isWhiteLineB = False
                                    Aeye.miner(jB, minY)
                                    Aeye.maxer(jB, maxY)
                                End If
                            Next
                            If Not isWhiteLineB And izugiB Then
                                'ListA.Add(i)
                                minX = iB
                                izugiB = Not izugiB
                            ElseIf isWhiteLineB And Not izugiB Then
                                If minObjectSize < iB - minX And minObjectSize < maxY - minY Then
                                    ImageListBlue.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))
                                End If

                                izugiB = Not izugiB
                                minY = 9001
                                maxY = 0
                            End If

                        Next
                    End If
                Next
            Next
            For Each item As Rectangle In ImageListBlue
                bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
            Next
            'For i = 0 To bmp.Height - 1
            '    For j = 0 To bmp.Width - 1
            '        If imageMatrix(j, i) Then
            '            bmp = Aeye.mark_dark_pixel(j, i, bmp, 1)
            '        End If
            '    Next
            'Next

        End Sub
        Private Function markObjects(ByVal bmp As Bitmap, ByVal objectList As List(Of Rectangle)) As Bitmap
            For Each item As Rectangle In objectList
                bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
            Next
            Return bmp
        End Function
        Private Function markPixelMatrix(ByVal bmp As Bitmap, ByVal objectList As Object) As Bitmap
            For i = 0 To bmp.Height - 1
                For j = 0 To bmp.Width - 1
                    If objectList(j, i) Then
                        bmp = Aeye.mark_dark_pixelRED(j, i, bmp, 1)
                    End If
                Next
            Next
            Return bmp
        End Function
        Public Sub shiber(ByVal bmp As Bitmap, ByRef ImageList As List(Of Rectangle), ByRef ec1 As EyeClasifire) 'lv2,3 analysis for biggest object only

            ' returns list of rectangles where images were detected
            Dim startX As Integer = (x - 1) * bmp.Width \ 3
            Dim endX As Integer = x * bmp.Width \ 3
            Dim startY As Integer = (y - 1) * bmp.Height \ 3
            Dim endY As Integer = y * bmp.Height \ 3
            bmp = Aeye.graphicContourWhite(bmp, startX + 2, endX - 2, startY + 2, endY - 2)
            Dim maxRecSize As Integer = 0
            Dim rectangleBiggest As New Rectangle()
            Dim foundObject As Boolean = False
            Dim Aizugi As Integer
            Dim Azugi As Integer
            Dim minY, maxY, minX As Integer
            minY = 9001
            maxY = 0
            'Dim ImageList As New List(Of Rectangle)
            Dim imageMatrix(bmp.Width, bmp.Height) As Boolean
            Dim ImageListBlue As New List(Of Rectangle)

            Dim izugi As Boolean = True
            Dim isWhiteLine As Boolean = True
            Dim st1 As Integer ' step to make alg run faster
            st1 = 1
            For i = startY + 2 To endY - 2 Step st1
                isWhiteLine = True
                For j = startX + 2 To endX - 2
                    ' do for black pixels
                    'imported code line
                    imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                    ' do for orange pixels
                    'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "o"
                    If imageMatrix(j, i) Then
                        isWhiteLine = False
                    End If

                Next
                If Not isWhiteLine And izugi Then
                    'ListA.Add(i)
                    Aizugi = i

                    izugi = Not izugi
                ElseIf isWhiteLine And Not izugi Then
                    'ListA.Add(i)
                    Azugi = i

                    izugi = Not izugi
                    Dim izugiB As Boolean = True
                    Dim isWhiteLineB As Boolean = True
                    For iB = startX + 2 To endX - 2 Step 1
                        isWhiteLineB = True
                        For jB = Aizugi To Azugi Step st1
                            If imageMatrix(iB, jB) Then
                                isWhiteLineB = False
                                Aeye.miner(jB, minY)
                                Aeye.maxer(jB, maxY)
                            End If
                        Next
                        If Not isWhiteLineB And izugiB Then
                            'ListA.Add(i)
                            minX = iB
                            izugiB = Not izugiB
                        ElseIf isWhiteLineB And Not izugiB Then
                            If minObjectSize < iB - minX And minObjectSize < maxY - minY Then
                                'If (iB - minX) * (maxY - minY) > maxRecSize Then
                                '    maxRecSize = (iB - minX) * (maxY - minY)
                                '    foundObject = True
                                '    rectangleBiggest = New Rectangle(minX, minY, iB - minX, maxY - minY)
                                'End If
                                ImageList.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))

                            End If

                            izugiB = Not izugiB
                            minY = 9001
                            maxY = 0
                        End If

                    Next
                End If
            Next


            'lv1 recs
            For Each item As Rectangle In ImageList
                'bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
                If item.Width * item.Height > maxRecSize Then
                    maxRecSize = item.Width * item.Height
                    foundObject = True
                    rectangleBiggest = item
                End If

            Next
            markObjects(bmp, ImageList)
#Region "lv2 clasifire"
            For i = 1 To 10
                For j = 1 To 10
                    If imageMatrix((j * rectangleBiggest.Width) \ 11 + rectangleBiggest.X, (i * rectangleBiggest.Height) \ 11 + rectangleBiggest.Y) Then
                        ec1.lv2 &= "1"
                    Else
                        ec1.lv2 &= "0"
                    End If

                Next
            Next
            MsgBox(ec1.lv2)
            'For i = rectangleBiggest.Y To rectangleBiggest.Y + rectangleBiggest.Height - 1
            '    For j = rectangleBiggest.X To rectangleBiggest.X + rectangleBiggest.Width - 1
#End Region
            If foundObject Then


#Region "Cluster"


                Dim outLineMatrix(bmp.Width, bmp.Height) As Boolean
                Dim cluster As Integer = 0
                Dim clusterlim As Integer = Convert.ToInt32(rectangleBiggest.Width * clusterPercent)
                Dim n1 As Integer
                n1 = rectangleBiggest.X + rectangleBiggest.Width - 1
                For i = rectangleBiggest.Y To rectangleBiggest.Y + rectangleBiggest.Height - 1
                    For j = rectangleBiggest.X To rectangleBiggest.X + rectangleBiggest.Width - 1
                        n1 = rectangleBiggest.X + rectangleBiggest.Width - 1
                        If imageMatrix(j, i) Then
                            n1 = j
                            Exit For
                        End If
                    Next

                    For j2 = n1 To rectangleBiggest.X + rectangleBiggest.Width - 1
                        If imageMatrix(j2, i) And cluster < clusterlim Then
                            cluster = 0
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'lv3
                            outLineMatrix(j2, i) = True

                        ElseIf cluster >= clusterlim Then
                            Exit For
                        Else
                            cluster += 1
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'outLineMatrix(j2, i) = True
                        End If
                    Next
                    cluster = 0

                Next
                n1 = rectangleBiggest.Y
                For i = rectangleBiggest.Y To rectangleBiggest.Y + rectangleBiggest.Height - 1
                    For j = rectangleBiggest.X + rectangleBiggest.Width - 1 To rectangleBiggest.X Step -1
                        n1 = rectangleBiggest.X
                        If imageMatrix(j, i) Then
                            n1 = j
                            Exit For
                        End If
                    Next

                    For j2 = n1 To rectangleBiggest.X Step -1
                        If imageMatrix(j2, i) And cluster < clusterlim Then
                            cluster = 0
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            outLineMatrix(j2, i) = True
                        ElseIf cluster >= clusterlim Then
                            Exit For
                        Else
                            cluster += 1
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'outLineMatrix(j2, i) = True
                        End If
                    Next
                    cluster = 0

                Next
                'For i = 0 To bmp.Height - 1
                '    For j = 0 To bmp.Width - 1
                '        If outLineMatrix(j, i) Then
                '            bmp = Aeye.mark_dark_pixelRED(j, i, bmp, 1)
                '        End If
                '    Next
                'Next
                markPixelMatrix(bmp, outLineMatrix)

                'lv3


#End Region

                izugi = True

                For i = rectangleBiggest.Y To rectangleBiggest.Height + rectangleBiggest.Y
                    isWhiteLine = True
                    For j = rectangleBiggest.X To rectangleBiggest.Width + rectangleBiggest.X
                        'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                        'imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                        If imageMatrix(j, i) Then
                            isWhiteLine = False
                        End If

                    Next
                    If Not isWhiteLine And izugi Then
                        'ListA.Add(i)
                        Aizugi = i

                        izugi = Not izugi
                    ElseIf isWhiteLine And Not izugi Then
                        'ListA.Add(i)
                        Azugi = i

                        izugi = Not izugi
                        Dim izugiB As Boolean = True
                        Dim isWhiteLineB As Boolean = True
                        For iB = rectangleBiggest.X To rectangleBiggest.Width + rectangleBiggest.X
                            isWhiteLineB = True
                            For jB = Aizugi To Azugi
                                If imageMatrix(iB, jB) Then
                                    isWhiteLineB = False
                                    Aeye.miner(jB, minY)
                                    Aeye.maxer(jB, maxY)
                                End If
                            Next
                            If Not isWhiteLineB And izugiB Then
                                'ListA.Add(i)
                                minX = iB
                                izugiB = Not izugiB
                            ElseIf isWhiteLineB And Not izugiB Then
                                If minObjectSize < iB - minX And minObjectSize < maxY - minY Then
                                    ImageListBlue.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))
                                End If

                                izugiB = Not izugiB
                                minY = 9001
                                maxY = 0
                            End If

                        Next
                    End If
                Next

            End If

            'For Each item As Rectangle In ImageListBlue
            '    bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
            'Next
            markObjects(bmp, ImageListBlue)
            'For i = 0 To bmp.Height - 1
            '    For j = 0 To bmp.Width - 1
            '        If imageMatrix(j, i) Then
            '            bmp = Aeye.mark_dark_pixel(j, i, bmp, 1)
            '        End If
            '    Next
            'Next

        End Sub
        Public Sub PopulateEyeData2(ByVal bmp As Bitmap, ByRef ImageList As List(Of Rectangle)) 'lv2,3 analysis for biggest object only
            'bmp = Aeye.graphicContourWhite(bmp, 10, bmp.Width - 10, 10, bmp.Height - 10)
            Dim maxRecSize As Integer = 0
            Dim rectangleBiggest As New Rectangle()
            Dim foundObject As Boolean = False
            Dim Aizugi As Integer
            Dim Azugi As Integer
            Dim minY, maxY, minX As Integer
            minY = 9001
            maxY = 0
            'Dim ImageList As New List(Of Rectangle)
            Dim imageMatrix(bmp.Width, bmp.Height) As Boolean
            Dim ImageListBlue As New List(Of Rectangle)

            Dim izugi As Boolean = True
            Dim isWhiteLine As Boolean = True
            Dim st1 As Integer ' step to make alg run faster
            st1 = 1
            For i = 2 To bmp.Height - 2 Step st1
                isWhiteLine = True
                For j = 2 To bmp.Width - 2
                    'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                    imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                    If imageMatrix(j, i) Then
                        isWhiteLine = False
                    End If

                Next
                If Not isWhiteLine And izugi Then
                    'ListA.Add(i)
                    Aizugi = i

                    izugi = Not izugi
                ElseIf isWhiteLine And Not izugi Then
                    'ListA.Add(i)
                    Azugi = i

                    izugi = Not izugi
                    Dim izugiB As Boolean = True
                    Dim isWhiteLineB As Boolean = True
                    For iB = 10 To bmp.Width - 10 Step 1
                        isWhiteLineB = True
                        For jB = Aizugi To Azugi Step st1
                            If imageMatrix(iB, jB) Then
                                isWhiteLineB = False
                                Aeye.miner(jB, minY)
                                Aeye.maxer(jB, maxY)
                            End If
                        Next
                        If Not isWhiteLineB And izugiB Then
                            'ListA.Add(i)
                            minX = iB
                            izugiB = Not izugiB
                        ElseIf isWhiteLineB And Not izugiB Then
                            If minObjectSize < iB - minX And minObjectSize < maxY - minY Then
                                'If (iB - minX) * (maxY - minY) > maxRecSize Then
                                '    maxRecSize = (iB - minX) * (maxY - minY)
                                '    foundObject = True
                                '    rectangleBiggest = New Rectangle(minX, minY, iB - minX, maxY - minY)
                                'End If
                                ImageList.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))

                            End If

                            izugiB = Not izugiB
                            minY = 9001
                            maxY = 0
                        End If

                    Next
                End If
            Next


            'lv1 recs
            For Each item As Rectangle In ImageList
                'bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
                If item.Width * item.Height > maxRecSize Then
                    maxRecSize = item.Width * item.Height
                    foundObject = True
                    rectangleBiggest = item
                End If

            Next
            markObjects(bmp, ImageList)
            If foundObject Then
#Region "Cluster"


                Dim outLineMatrix(bmp.Width, bmp.Height) As Boolean
                Dim cluster As Integer = 0
                Dim clusterlim As Integer = Convert.ToInt32(rectangleBiggest.Width * clusterPercent)
                Dim n1 As Integer
                n1 = rectangleBiggest.X + rectangleBiggest.Width - 1
                For i = rectangleBiggest.Y To rectangleBiggest.Y + rectangleBiggest.Height - 1
                    For j = rectangleBiggest.X To rectangleBiggest.X + rectangleBiggest.Width - 1
                        n1 = rectangleBiggest.X + rectangleBiggest.Width - 1
                        If imageMatrix(j, i) Then
                            n1 = j
                            Exit For
                        End If
                    Next

                    For j2 = n1 To rectangleBiggest.X + rectangleBiggest.Width - 1
                        If imageMatrix(j2, i) And cluster < clusterlim Then
                            cluster = 0
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'lv3
                            outLineMatrix(j2, i) = True

                        ElseIf cluster >= clusterlim Then
                            Exit For
                        Else
                            cluster += 1
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'outLineMatrix(j2, i) = True
                        End If
                    Next
                    cluster = 0

                Next
                n1 = rectangleBiggest.Y
                For i = rectangleBiggest.Y To rectangleBiggest.Y + rectangleBiggest.Height - 1
                    For j = rectangleBiggest.X + rectangleBiggest.Width - 1 To rectangleBiggest.X Step -1
                        n1 = rectangleBiggest.X
                        If imageMatrix(j, i) Then
                            n1 = j
                            Exit For
                        End If
                    Next

                    For j2 = n1 To rectangleBiggest.X Step -1
                        If imageMatrix(j2, i) And cluster < clusterlim Then
                            cluster = 0
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            outLineMatrix(j2, i) = True
                        ElseIf cluster >= clusterlim Then
                            Exit For
                        Else
                            cluster += 1
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                            'outLineMatrix(j2, i) = True
                        End If
                    Next
                    cluster = 0

                Next
                'For i = 0 To bmp.Height - 1
                '    For j = 0 To bmp.Width - 1
                '        If outLineMatrix(j, i) Then
                '            bmp = Aeye.mark_dark_pixelRED(j, i, bmp, 1)
                '        End If
                '    Next
                'Next
                markPixelMatrix(bmp, outLineMatrix)

                'lv3


#End Region

                izugi = True

                For i = rectangleBiggest.Y To rectangleBiggest.Height + rectangleBiggest.Y
                    isWhiteLine = True
                    For j = rectangleBiggest.X To rectangleBiggest.Width + rectangleBiggest.X
                        'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                        'imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                        If imageMatrix(j, i) Then
                            isWhiteLine = False
                        End If

                    Next
                    If Not isWhiteLine And izugi Then
                        'ListA.Add(i)
                        Aizugi = i

                        izugi = Not izugi
                    ElseIf isWhiteLine And Not izugi Then
                        'ListA.Add(i)
                        Azugi = i

                        izugi = Not izugi
                        Dim izugiB As Boolean = True
                        Dim isWhiteLineB As Boolean = True
                        For iB = rectangleBiggest.X To rectangleBiggest.Width + rectangleBiggest.X
                            isWhiteLineB = True
                            For jB = Aizugi To Azugi
                                If imageMatrix(iB, jB) Then
                                    isWhiteLineB = False
                                    Aeye.miner(jB, minY)
                                    Aeye.maxer(jB, maxY)
                                End If
                            Next
                            If Not isWhiteLineB And izugiB Then
                                'ListA.Add(i)
                                minX = iB
                                izugiB = Not izugiB
                            ElseIf isWhiteLineB And Not izugiB Then
                                If minObjectSize < iB - minX And minObjectSize < maxY - minY Then
                                    ImageListBlue.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))
                                End If

                                izugiB = Not izugiB
                                minY = 9001
                                maxY = 0
                            End If

                        Next
                    End If
                Next

            End If

            'For Each item As Rectangle In ImageListBlue
            '    bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
            'Next
            markObjects(bmp, ImageListBlue)
            'For i = 0 To bmp.Height - 1
            '    For j = 0 To bmp.Width - 1
            '        If imageMatrix(j, i) Then
            '            bmp = Aeye.mark_dark_pixel(j, i, bmp, 1)
            '        End If
            '    Next
            'Next

        End Sub
        Public Shared Sub simpleImagesDetecter(ByVal bmp As Bitmap, ByRef ImageList As List(Of Rectangle))
            bmp = Aeye.graphicContourWhite(bmp, 10, bmp.Width - 10, 10, bmp.Height - 10)
            Dim Aizugi As Integer
            Dim Azugi As Integer
            Dim minY, maxY, minX As Integer
            minY = 9001
            maxY = 0
            'Dim ImageList As New List(Of Rectangle)
            Dim imageMatrix(bmp.Width, bmp.Height) As Boolean

            Dim izugi As Boolean = True
            Dim isWhiteLine As Boolean = True
            Dim st1 As Integer ' step to make alg run faster
            st1 = 1
            For i = 10 To bmp.Height - 10 Step st1
                isWhiteLine = True
                For j = 10 To bmp.Width - 10
                    'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                    imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                    If imageMatrix(j, i) Then
                        isWhiteLine = False
                    End If

                Next
                If Not isWhiteLine And izugi Then
                    'ListA.Add(i)
                    Aizugi = i

                    izugi = Not izugi
                ElseIf isWhiteLine And Not izugi Then
                    'ListA.Add(i)
                    Azugi = i

                    izugi = Not izugi
                    Dim izugiB As Boolean = True
                    Dim isWhiteLineB As Boolean = True
                    For iB = 10 To bmp.Width - 10 Step 1
                        isWhiteLineB = True
                        For jB = Aizugi To Azugi Step st1
                            If imageMatrix(iB, jB) Then
                                isWhiteLineB = False
                                Aeye.miner(jB, minY)
                                Aeye.maxer(jB, maxY)
                            End If
                        Next
                        If Not isWhiteLineB And izugiB Then
                            'ListA.Add(i)
                            minX = iB
                            izugiB = Not izugiB
                        ElseIf isWhiteLineB And Not izugiB Then
                            ImageList.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))
                            izugiB = Not izugiB
                            minY = 9001
                            maxY = 0
                        End If

                    Next
                End If
            Next
        End Sub
        Public Shared Sub ImagesDetecter(ByVal bmp As Bitmap, ByRef ImageList As List(Of Rectangle))
            'bmp = Aeye.graphicContourWhite(bmp, 10, bmp.Width - 10, 10, bmp.Height - 10)
            Dim Aizugi As Integer
            Dim Azugi As Integer
            Dim minY, maxY, minX As Integer
            minY = 9001
            maxY = 0
            'Dim ImageList As New List(Of Rectangle)
            Dim imageMatrix(bmp.Width, bmp.Height) As Boolean
            Dim ImageListBlue As New List(Of Rectangle)

            Dim izugi As Boolean = True
            Dim isWhiteLine As Boolean = True
            Dim st1 As Integer ' step to make alg run faster
            st1 = 1
            For i = 10 To bmp.Height - 10 Step st1
                isWhiteLine = True
                For j = 10 To bmp.Width - 10
                    'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                    imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                    If imageMatrix(j, i) Then
                        isWhiteLine = False
                    End If

                Next
                If Not isWhiteLine And izugi Then
                    'ListA.Add(i)
                    Aizugi = i

                    izugi = Not izugi
                ElseIf isWhiteLine And Not izugi Then
                    'ListA.Add(i)
                    Azugi = i

                    izugi = Not izugi
                    Dim izugiB As Boolean = True
                    Dim isWhiteLineB As Boolean = True
                    For iB = 10 To bmp.Width - 10 Step 1
                        isWhiteLineB = True
                        For jB = Aizugi To Azugi Step st1
                            If imageMatrix(iB, jB) Then
                                isWhiteLineB = False
                                Aeye.miner(jB, minY)
                                Aeye.maxer(jB, maxY)
                            End If
                        Next
                        If Not isWhiteLineB And izugiB Then
                            'ListA.Add(i)
                            minX = iB
                            izugiB = Not izugiB
                        ElseIf isWhiteLineB And Not izugiB Then
                            ImageList.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))
                            izugiB = Not izugiB
                            minY = 9001
                            maxY = 0
                        End If

                    Next
                End If
            Next
            'lv1 recs
            For Each item As Rectangle In ImageList
                bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
                'TextBox3.Text &= "size " & (item.Height * item.Width) & " "
            Next
#Region "Cluster"
            For Each item As Rectangle In ImageList
                Dim cluster As Integer = 0
                Dim clusterlim As Integer = Convert.ToInt32(item.Width * 0.05)
                Dim n1 As Integer
                n1 = item.X + item.Width - 1
                For i = item.Y To item.Y + item.Height - 1
                    For j = item.X To item.X + item.Width - 1
                        n1 = item.X + item.Width - 1
                        If imageMatrix(j, i) Then
                            n1 = j
                            Exit For
                        End If
                    Next

                    For j2 = n1 To item.X + item.Width - 1
                        If imageMatrix(j2, i) And cluster < clusterlim Then
                            cluster = 0
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                        ElseIf cluster >= clusterlim Then
                            Exit For
                        Else
                            cluster += 1
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                        End If
                    Next
                    cluster = 0

                Next
                n1 = item.Y
                For i = item.Y To item.Y + item.Height - 1
                    For j = item.X + item.Width - 1 To item.X Step -1
                        n1 = item.X
                        If imageMatrix(j, i) Then
                            n1 = j
                            Exit For
                        End If
                    Next

                    For j2 = n1 To item.X Step -1
                        If imageMatrix(j2, i) And cluster < clusterlim Then
                            cluster = 0
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                        ElseIf cluster >= clusterlim Then
                            Exit For
                        Else
                            cluster += 1
                            'bmp = Aeye.mark_dark_pixelRED(j2, i, bmp, 1)
                            imageMatrix(j2, i) = False
                        End If
                    Next
                    cluster = 0

                Next
            Next

#End Region
            For Each item As Rectangle In ImageList
                izugi = True

                For i = item.Y To item.Height + item.Y
                    isWhiteLine = True
                    For j = item.X To item.Width + item.X
                        'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                        'imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                        If imageMatrix(j, i) Then
                            isWhiteLine = False
                        End If

                    Next
                    If Not isWhiteLine And izugi Then
                        'ListA.Add(i)
                        Aizugi = i

                        izugi = Not izugi
                    ElseIf isWhiteLine And Not izugi Then
                        'ListA.Add(i)
                        Azugi = i

                        izugi = Not izugi
                        Dim izugiB As Boolean = True
                        Dim isWhiteLineB As Boolean = True
                        For iB = item.X To item.Width + item.X
                            isWhiteLineB = True
                            For jB = Aizugi To Azugi
                                If imageMatrix(iB, jB) Then
                                    isWhiteLineB = False
                                    Aeye.miner(jB, minY)
                                    Aeye.maxer(jB, maxY)
                                End If
                            Next
                            If Not isWhiteLineB And izugiB Then
                                'ListA.Add(i)
                                minX = iB
                                izugiB = Not izugiB
                            ElseIf isWhiteLineB And Not izugiB Then
                                ImageListBlue.Add(New Rectangle(minX, minY, iB - minX, maxY - minY))
                                izugiB = Not izugiB
                                minY = 9001
                                maxY = 0
                            End If

                        Next
                    End If
                Next
            Next
            For Each item As Rectangle In ImageListBlue
                bmp = Aeye.graphicContour(bmp, item.X, item.Width + item.X, item.Y, item.Height + item.Y)
            Next
            For i = 0 To bmp.Height - 1
                For j = 0 To bmp.Width - 1
                    If imageMatrix(j, i) Then
                        bmp = Aeye.mark_dark_pixel(j, i, bmp, 1)
                    End If
                Next
            Next
        End Sub
        Public Shared Sub ImagesDetecterLv2(ByVal bmp As Bitmap, ByRef ImageList As List(Of Rectangle), ByRef rec1 As Rectangle)
            Dim R1 As New Rectangle()

            bmp = Aeye.graphicContourWhite(bmp, 0, bmp.Width - 1, 0, bmp.Height - 1)
            Dim Aizugi As Integer
            Dim Azugi As Integer
            Dim minY, maxY, minX As Integer
            minY = 9001
            maxY = 0
            'Dim ImageList As New List(Of Rectangle)
            Dim imageMatrix(bmp.Width, bmp.Height) As Boolean

            Dim izugi As Boolean = True
            Dim isWhiteLine As Boolean = True
            Dim st1 As Integer ' step to make alg run faster
            st1 = 1
            For i = 0 To bmp.Height - 1 Step st1
                isWhiteLine = True
                For j = 0 To bmp.Width - 1
                    'imageMatrix(j, i) = Aeye.getPixelColor(bmp.GetPixel(j, i).R, bmp.GetPixel(j, i).G, bmp.GetPixel(j, i).B) = "k"
                    imageMatrix(j, i) = Not Aeye.isOutLine(j, i, bmp, 20)
                    If imageMatrix(j, i) Then
                        isWhiteLine = False
                    End If

                Next
                If Not isWhiteLine And izugi Then
                    'ListA.Add(i)
                    Aizugi = i

                    izugi = Not izugi
                ElseIf isWhiteLine And Not izugi Then
                    'ListA.Add(i)
                    Azugi = i

                    izugi = Not izugi
                    Dim izugiB As Boolean = True
                    Dim isWhiteLineB As Boolean = True
                    For iB = 10 To bmp.Width - 10 Step 1
                        isWhiteLineB = True
                        For jB = Aizugi To Azugi Step st1
                            If imageMatrix(iB, jB) Then
                                isWhiteLineB = False
                                Aeye.miner(jB, minY)
                                Aeye.maxer(jB, maxY)
                            End If
                        Next
                        If Not isWhiteLineB And izugiB Then
                            'ListA.Add(i)
                            minX = iB
                            izugiB = Not izugiB
                        ElseIf isWhiteLineB And Not izugiB Then
                            R1 = New Rectangle(minX, minY, iB - minX, maxY - minY)
                            If (R1.Height * R1.Width) > (rec1.Height * rec1.Width) Then
                                rec1 = R1
                            End If
                            ImageList.Add(R1)
                            izugiB = Not izugiB
                            minY = 9001
                            maxY = 0
                        End If

                    Next
                End If
            Next
        End Sub
        Public Shared Function DirectionGetter(ByRef bmp1 As Bitmap) As String
            Static Dim imageA(13, 13) As Boolean
            Static Dim changePrevMax As Integer = -1
            Static Dim changePrevMin As Integer = 9001
            Static Dim changePrevMaxY As Integer = -1
            Static Dim changePrevMinY As Integer = 9001
            Static Dim resulTemp As String = ""
            Static Dim edge1 As String = ""
            Static Dim edge2 As String = ""
            Static Dim edge3 As String = ""
            Static Dim edge4 As String = ""
            Dim b1 As Boolean = False
            resulTemp = ""
            Dim imageB(13, 13) As Boolean
            Dim changeCurMax As Integer = -1
            Dim changeCurMin As Integer = 9001
            Dim changeCurMaxY As Integer = -1
            Dim changeCurMinY As Integer = 9001
            For i = 1 To 13
                For j = 1 To 13
                    If Not Aeye.isOutLine(j * bmp1.Width \ 14, i * bmp1.Height \ 14, bmp1, 20) Then
                        bmp1 = Aeye.mark_dark_pixelRED(j * bmp1.Width \ 14, i * bmp1.Height \ 14, bmp1, 6)
                        imageB(j, i) = True

                    End If
                    If (imageB(j, i) And Not imageA(j, i)) Then
                        Aeye.miner(j, changeCurMin)
                        Aeye.maxer(j, changeCurMax)
                        Aeye.miner(i, changeCurMinY)
                        Aeye.maxer(i, changeCurMaxY)
                    End If
                Next

            Next
            graphicContourBlue(bmp1, changeCurMin * bmp1.Width \ 14, changeCurMax * bmp1.Width \ 14, changeCurMinY * bmp1.Height \ 14, changeCurMaxY * bmp1.Height \ 14)
            If changeCurMax > changePrevMax Then
                resulTemp &= "right"
            End If
            If changeCurMin < changePrevMin Then
                resulTemp &= "left"
            End If
            If resulTemp = "rightleft" Then
                resulTemp = "explosion"
            End If
            If changeCurMax < changePrevMax And changeCurMin > changePrevMin Then
                resulTemp = "implosion"
            End If
            If Not (changeCurMax = -1 And changePrevMax = -1) Then
                If changeCurMax = -1 Or changePrevMax = -1 Then
                    resulTemp = "blink"
                End If
                edge2 = changeCurMax.ToString & "  " & changeCurMin.ToString
                edge1 = changePrevMax.ToString & "  " & changePrevMin.ToString
                Static Dim ppm As Integer
                Static Dim ppmin As Integer

                If resulTemp.Contains("blink") And Not changeCurMax = -1 Then
                    If changeCurMax > ppm Then
                        resulTemp = "right"
                    End If
                    If changeCurMin < ppmin Then
                        resulTemp = "left"
                    End If
                End If
                ppm = changePrevMax
                ppmin = changePrevMin
                b1 = True



                changePrevMax = changeCurMax
                changePrevMin = changeCurMin
            Else
                resulTemp = "static"
            End If

            'y axis
            Dim temp1 As String = resulTemp
            resulTemp = ""
            If changeCurMaxY > changePrevMaxY Then
                resulTemp &= "Down"
            End If
            If changeCurMinY < changePrevMinY Then
                resulTemp &= "Up"
            End If
            If resulTemp = "DownUp" Then
                resulTemp = "explosionY"
            End If
            If changeCurMaxY < changePrevMaxY And changeCurMinY > changePrevMinY Then
                resulTemp = "implosionY"
            End If
            If Not (changeCurMaxY = -1 And changePrevMaxY = -1) Then
                If changeCurMaxY = -1 Or changePrevMaxY = -1 Then
                    resulTemp = "blink"
                End If
                edge4 = changeCurMaxY.ToString & "  " & changeCurMinY.ToString
                edge3 = changePrevMaxY.ToString & "  " & changePrevMinY.ToString
                Static Dim ppmY As Integer
                Static Dim ppminY As Integer

                If resulTemp.Contains("blink") And Not changeCurMaxY = -1 Then
                    If changeCurMaxY > ppmY Then
                        resulTemp = "Down"
                    End If
                    If changeCurMinY < ppminY Then
                        resulTemp = "Up"
                    End If
                End If
                ppmY = changePrevMaxY
                ppminY = changePrevMinY
                b1 = True



                changePrevMaxY = changeCurMaxY
                changePrevMinY = changeCurMinY
            Else
                resulTemp &= "staticY"
            End If
            If b1 Then
                For i = 1 To 13
                    For j = 1 To 13

                        imageA(j, i) = imageB(j, i)


                    Next
                Next
            End If


            Return temp1 & " " & resulTemp

        End Function
    End Class
End Namespace

