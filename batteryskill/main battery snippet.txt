private fun batterySkin(str:String){
                        var resultStr = chii!!.doIt("",str,"")
                editText.setText("")
                mbTTS.voiceIt(resultStr)
                if (mbTTS.TTS){speakOut(resultStr)}
    }
    private val mBatInfoReceiver = object : BroadcastReceiver() {
        override fun onReceive(ctxt: Context, intent: Intent) {
	    // prevBatState is a global var starts as false
            val level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0)
            val status: Int = intent.getIntExtra(BatteryManager.EXTRA_STATUS, -1)
            val isCharging: Boolean = status == BatteryManager.BATTERY_STATUS_CHARGING
                    || status == BatteryManager.BATTERY_STATUS_FULL
            val chargePlug: Int = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1)
            val usbCharge: Boolean = chargePlug == BatteryManager.BATTERY_PLUGGED_USB
            val acCharge: Boolean = chargePlug == BatteryManager.BATTERY_PLUGGED_AC
            val charging = usbCharge || acCharge;
            if(prevBatState xor charging){
                prevBatState=charging;
                if(usbCharge){batterySkin("slow");return;}
                if(acCharge){batterySkin("fast");return;}
                batterySkin("unplugged")
            }
            if (!b8TriTimeGate.isClosed) {
                b8TriTimeGate.close(5)
                batterySkin("$level charge")
            }
        }
    }