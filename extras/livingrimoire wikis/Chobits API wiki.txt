    protected ArrayList<DiSkillV2> dClasses = new ArrayList<>();;
    // algorithms fusion (polymarization)
    protected Hashtable<String, Integer> algDurations = new Hashtable<>();;
    protected Fusion fusion;
    // region essential DClasses
    // endregion
    protected Neuron noiron;
    // added :
    protected Kokoro kokoro = new Kokoro(new AbsDictionaryDB()); // consciousness
    protected String lastOutput = "";
    // standBy phase 260320
    protected TimeGate timeGate = new TimeGate();
    public Chobits() {
        // c'tor
    /* set the chobit database
        the database is built as a key value dictionary
        the database can be used with by the Kokoro attribute
    * */
    public void setDataBase(AbsDictionaryDB absDictionaryDB) {
    public Chobits addSkill(DiSkillV2 skill){
        // add a skill (builder design patterned func))
    public void clearSkills(){
        // remove all skills
    public void addSkills(DiSkillV2... skills){
    public void setPause(int pause){
        // set standby timegate pause.
        // pause time without output from the chobit
        // means the standby attribute will be true for a moment.
        // it is the equivelant of the chobit being bored
        // the standby attribute can be accessed via the kokoro
        // object within a skill if needed
    public String think(String ear, String skin, String eye) {
        // the input will be processed by the chobits' skills
    public String getSoulEmotion() {
        // get the last active AlgPart name
        // the AP is an action, and it also represents
        // an emotion
    public Boolean getStandby() {
        // this is an under use method
        // only use this for testing
    public Kokoro getKokoro() {
        // several chobits can use the same soul
        // this enables telepathic communications
        // between chobits in the same project
    public void setKokoro(Kokoro kokoro) {
        // use this for telepathic communication between different chobits objects
    public Hashtable<String, Integer> getAlgDurations() {
        // think cycles run duration per algorithm
        // use this method for saving run times if you wish
    public void setAlgDurations(Hashtable<String, Integer> algDurations) {
        // think cycles run duration per algorithm
        // use this method for saving run times if you wish
        // algDurations are shallow ref to Fusions' algDurations
        // shorter algDurations give algorithms run priority in case several algorithms(sent by skills) want to run
        // at the same time
    public Fusion getFusion() {