from __future__ import annotations
from abc import ABC, abstractmethod
from enum import Enum

'''
Failure types:
- ok: no fail
- requip: item should be added
- cloudian: algorithm goes to stand by in its Dclass
- fail: no input
'''
class enumFail (Enum):
    fail = "fail"
    requip = "requip"
    dequip = "dequip"
    cloudian = "cloudian"
    ok = "ok"


class Mutatable:
    @abstractmethod
    def action(self, ear: str, skin: str, eye: str) -> str:
        """Returns action string"""
        ...

    @abstractmethod
    def failure(self, input: str) -> enumFail:
        """Failure type only mutatable may use enumFail.fail"""
        pass

    @abstractmethod
    def completed(self) -> bool:
        """Has finished ?"""
        pass

    @abstractmethod
    def clone(self) -> Mutatable:
        pass

    def getMutationLimit(self) -> int:
        return 0

    @abstractmethod
    def myName(self) -> str:
        """Returns the class name"""
        return self.__class__.__name__

    @abstractmethod
    def mutation(self) -> Mutatable:
        self.clone()


'''
it speaks something x times
a most basic skill.
also fun to make the chobit say what you want
'''
class APSay(Mutatable):
    def __init__(self, at: int, param: str) -> None:
        super().__init__()
        if (at > 10):
            at = 10
        self.at = at
        self.param = param

    def action(self, ear: str, skin: str, eye: str) -> str:
        '''TODO Auto-generated method stub'''
        axnStr = ""
        if (self.at > 0):
            if (ear.lower() != self.param.lower()):
                axnStr = self.param
                self.at -= 1
        return axnStr

    def failure(self, input: str) -> enumFail:
        '''TODO Auto-generated method stub'''
        return enumFail.ok

    def completed(self) -> bool:
        '''TODO Auto-generated method stub'''
        return self.at < 1

    def clone(self) -> AbsAlgPart:
        '''TODO Auto-generated method stub'''
        return APSay(self.at, self.param)


if __name__ == "__main__":
    apsay = APSay(7, "seven")
    print("The output of the action() method is: " + apsay.action("six","",""))
    print("The output of the failure() method is: " + apsay.failure("input").name)
    print("The output of the completed() method is: " + str(apsay.completed()))
    for x in range(8):
        print(apsay.action("six","",""))
    clone = apsay.clone()
    print("\napsay has been cloned, let's see its details:")
    print("The output of the action() method is: " + clone.action("six","",""))
    print("The output of the failure() method is: " + clone.failure("input").name)
    print("The output of the completed() method is: " + str(clone.completed()))

