package com.yotamarker.lg200221

import AccelerometerManager
import android.Manifest
import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.hardware.SensorManager
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.Handler
import android.speech.RecognizerIntent
import android.speech.tts.TextToSpeech
import android.util.Log
import android.view.View
import android.view.WindowManager
import android.widget.Toast
import androidx.annotation.NonNull
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import kotlinx.android.synthetic.main.activity_main.*
import java.util.*

class MainActivity : AppCompatActivity() , AccelerometerListener{
    private var tts: TextToSpeech? = null;private var mouth: Mouth? = null //tts setup line 1 of 3 global var declaration
    val tempratureUtil = TempratureUtil();//tempratur MVC
    val b8TriUtil = B8TriUtil();//battery level getting util
    var compassUtil:CompassUtil?=null;
    var gyroUtil:GyroUtil?=null

    //TODO
    //STT :
    var sttUtilKt:STTUtilKt?=null
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);//disables screen timeout
        //ticker :
        val soulTickerTest = SoulTickerTest(Handler(),textView);
        soulTickerTest.turnOn()
        //temprature MVC 2 of lines of code register the receiver, use tempratureUtil.b8TriTemp to get temprature:
        this.registerReceiver(tempratureUtil.broadcastreceiver,tempratureUtil.intentfilter);
        //B8TriUtil MVC 2 of lines of code register the receiver, use b8TriUtil.b8TriLevel to get power lv:
        this.registerReceiver(b8TriUtil.mBatInfoReceiver, b8TriUtil.intentFilter);
        tts = TextToSpeech(this, TTSV2(tts));mouth= Mouth(tts!!)//tts setup line 2 of 3 place in onCreate methode
        val sensorManager:SensorManager = getSystemService(SENSOR_SERVICE) as SensorManager;
        compassUtil= CompassUtil(sensorManager)
        gyroUtil= GyroUtil(this);
        //TODO
        sttUtilKt = STTUtilKt(this,this)
        askPermission()
    }
    fun txtBoxOnClick(view: View){
        //Toast.makeText(this, tempratureUtil.b8TriTemp, Toast.LENGTH_LONG).show()
        //Toast.makeText(this, b8TriUtil.b8TriLevelAsAString, Toast.LENGTH_LONG).show()
        //Toast.makeText(this, compassUtil!!.getmCurrentDegreeAsString(), Toast.LENGTH_LONG).show()
        //Toast.makeText(this, gyroUtil!!.getMovementation(), Toast.LENGTH_LONG).show()
//        Toast.makeText(this, gyroUtil!!.getMovementation(), Toast.LENGTH_LONG).show()
        mouth!!.speakOut("hadouken")
        runSpeechRecognition()
        Toast.makeText(this, sttUtilKt!!.getSttIn(), Toast.LENGTH_LONG).show()
    }
    public override fun onDestroy() {
        // Shutdown TTS
        super.onDestroy()
        mouth!!.onDestroy()//tts setup line 3 of 3 place in onDestroy() of MainActivity
        gyroUtil!!.onDestroy()
    }

    override fun onPause() {
        super.onPause()
        compassUtil!!.onPause()
    }

    override fun onStop() {
        super.onStop()
        gyroUtil!!.onStop()
    }
    override fun onResume() {
        super.onResume()
        compassUtil!!.onResume()
        gyroUtil!!.onResume()
    }

    override fun onAccelerationChanged(x: Float, y: Float, z: Float) {
        gyroUtil!!.onAccelerationChanged(x,y,z)
    }

    override fun onShake(force: Float) {
        gyroUtil!!.onShake(force)
    }
    //TODO
    private fun runSpeechRecognition() {
        //handle the speech recognition intent
        val intent = sttUtilKt!!.runSpeechRecognition()
        if (sttUtilKt!!.hasAudioPermission)
        {
            try
            {
                startActivityForResult(intent, sttUtilKt!!.RECOGNITION_RESULT)
            }
            catch (e: ActivityNotFoundException) {
                Toast.makeText(this.applicationContext, "ERROR", Toast.LENGTH_SHORT).show()
            }
            catch (e:Exception) {
                Log.e("WTF", "runSpeechRecognition: " + e.message)
            }
        }
    }
    protected override fun onActivityResult(requestCode:Int, resultCode:Int, data:Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        sttUtilKt!!.onActivityResult(requestCode,resultCode,data)
        }
override fun onRequestPermissionsResult(requestCode:Int, @NonNull permissions:Array<String>, @NonNull grantResults:IntArray) {
    //GPS beefup
    super.onRequestPermissionsResult(requestCode, permissions, grantResults)
    sttUtilKt!!.onRequestPermissionsResult(requestCode,permissions,grantResults)
}
    private fun askPermission() {
        //create a list of permissions
        sttUtilKt!!.askPermission()
    }
}